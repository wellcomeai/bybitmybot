import asyncio
import websockets
import json
from typing import Dict, Any
from datetime import datetime
from ..base import BaseWebSocketConnector

class BybitWebSocketConnector(BaseWebSocketConnector):
    """WebSocket –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è Bybit"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__("BybitWS", config)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.websocket_url = config.get('websocket_url', 'wss://stream.bybit.com/v5/public/spot')
        self.symbol = config.get('symbol', 'BTCUSDT')
        self.reconnect_delay = config.get('reconnect_delay', 5)
        self.ping_interval = config.get('ping_interval', 20)
        self.ping_timeout = config.get('ping_timeout', 10)
        self.recv_timeout = config.get('recv_timeout', 30)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.last_price = None
        self.last_update = None
        self.total_messages = 0
    
    async def connect(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        if self.running:
            self.logger.warning("–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return True
            
        self.logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.websocket_url}...")
        self.running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        asyncio.create_task(self._connection_loop())
        return True
    
    async def disconnect(self) -> bool:
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        self.logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket...")
        self.running = False
        
        if self.websocket:
            await self.websocket.close()
            
        self.is_connected = False
        return True
    
    async def is_healthy(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if not self.running:
            return False
            
        if not self.is_connected:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª–∏ –ª–∏ –º—ã –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–∞–≤–Ω–æ
        if self.last_update:
            time_since_update = (datetime.now() - self.last_update).seconds
            return time_since_update < 60  # –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —á–∞—â–µ —Ä–∞–∑–∞ –≤ –º–∏–Ω—É—Ç—É
            
        return False
    
    async def _connection_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏"""
        while self.running:
            try:
                await self._handle_websocket_connection()
            except Exception as e:
                if self.running:
                    self.reconnect_count += 1
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ #{self.reconnect_count} —á–µ—Ä–µ–∑ {self.reconnect_delay}—Å...")
                    self.is_connected = False
                    await asyncio.sleep(self.reconnect_delay)
    
    async def _handle_websocket_connection(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        async with websockets.connect(
            self.websocket_url,
            ping_interval=self.ping_interval,
            ping_timeout=self.ping_timeout
        ) as ws:
            self.websocket = ws
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–∏–∫–µ—Ä—ã
            await self._subscribe_to_tickers()
            
            self.logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä—ã {self.symbol} —É—Å–ø–µ—à–Ω–∞")
            self.is_connected = True
            self.reconnect_count = 0
            
            # –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await self._emit_event('connected', {
                'symbol': self.symbol,
                'websocket_url': self.websocket_url
            })
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            await self._message_loop()
    
    async def _subscribe_to_tickers(self):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä—ã"""
        subscription_message = {
            "op": "subscribe", 
            "args": [f"tickers.{self.symbol}"]
        }
        
        await self.websocket.send(json.dumps(subscription_message))
        self.logger.debug(f"üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {subscription_message}")
    
    async def _message_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while self.running and self.is_connected:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                message = await asyncio.wait_for(
                    self.websocket.recv(), 
                    timeout=self.recv_timeout
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self._handle_message(message)
                
            except asyncio.TimeoutError:
                self.logger.warning("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping...")
                await self.websocket.ping()
            
            except websockets.exceptions.ConnectionClosed:
                self.logger.warning("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                self.is_connected = False
                break
                
    async def _handle_message(self, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            data = json.loads(message)
            self.total_messages += 1
            self.last_update = datetime.now()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–±–∞–≥–∞
            self.logger.debug(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤
            if self._is_ticker_data(data):
                await self._handle_ticker_data(data)
            
        except json.JSONDecodeError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def _is_ticker_data(self, data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ —Ç–∏–∫–µ—Ä–∞"""
        return (
            isinstance(data, dict) and 
            "data" in data and 
            isinstance(data["data"], dict) and
            "lastPrice" in data["data"]
        )
    
    async def _handle_ticker_data(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–∞"""
        try:
            ticker_data = data["data"]
            price_str = ticker_data.get("lastPrice")
            
            if not price_str:
                return
                
            price = float(price_str)
            self.last_price = price
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
            price_event = {
                'symbol': self.symbol,
                'price': price,
                'timestamp': datetime.now(),
                'raw_data': ticker_data
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ü–µ–Ω—É
            self.logger.debug(f"üìä {self.symbol}: ${price:,.2f}")
            
            # –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã
            await self._emit_event('price_update', price_event)
            
        except (ValueError, KeyError) as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞"""
        return {
            'name': self.name,
            'is_connected': self.is_connected,
            'is_healthy': asyncio.create_task(self.is_healthy()) if self.running else False,
            'reconnect_count': self.reconnect_count,
            'total_messages': self.total_messages,
            'last_price': self.last_price,
            'last_update': self.last_update.isoformat() if self.last_update else None,
            'symbol': self.symbol,
            'websocket_url': self.websocket_url
        }
