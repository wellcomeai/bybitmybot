import asyncio
import requests
from typing import Dict, Any, Optional
from datetime import datetime
from ..base import BaseNotificationConnector

class TelegramConnector(BaseNotificationConnector):
    """–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__("Telegram", config)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.bot_token = config.get('bot_token')
        self.chat_id = config.get('chat_id')
        self.timeout = config.get('timeout', 10)
        self.max_retries = config.get('max_retries', 3)
        self.retry_delay = config.get('retry_delay', 2)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not self.bot_token:
            raise ValueError("Telegram bot_token is required")
        if not self.chat_id:
            raise ValueError("Telegram chat_id is required")
            
        # –ë–∞–∑–æ–≤—ã–π URL API
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.messages_sent = 0
        self.messages_failed = 0
        self.last_message_time = None
        
        self.logger.info(f"ü§ñ Telegram –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Ç–∞: {self.chat_id}")
    
    async def connect(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            response = await self._make_api_request('getMe')
            if response and response.get('ok'):
                bot_info = response.get('result', {})
                self.logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ. –ë–æ—Ç: @{bot_info.get('username', 'unknown')}")
                self.is_connected = True
                return True
            else:
                self.logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
            return False
    
    async def disconnect(self) -> bool:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ (–¥–ª—è Telegram API –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)"""
        self.is_connected = False
        self.logger.info("üì± Telegram –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")
        return True
    
    async def is_healthy(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞"""
        if not self.is_connected:
            return False
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            response = await self._make_api_request('getMe')
            return response and response.get('ok', False)
        except:
            return False
    
    async def send_message(self, message: str, **kwargs) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': kwargs.get('parse_mode', 'HTML'),
                'disable_web_page_preview': kwargs.get('disable_preview', True)
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å retry –ª–æ–≥–∏–∫–æ–π
            success = await self._send_with_retry('sendMessage', data)
            
            if success:
                self.messages_sent += 1
                self.last_message_time = datetime.now()
                self.logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message[:50]}...")
            else:
                self.messages_failed += 1
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {message[:50]}...")
            
            return success
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.messages_failed += 1
            return False
    
    def send_message_sync(self, message: str, **kwargs) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è shutdown)"""
        try:
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': kwargs.get('parse_mode', 'HTML'),
                'disable_web_page_preview': kwargs.get('disable_preview', True)
            }
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å retry
            for attempt in range(self.max_retries):
                try:
                    response = requests.post(
                        f"{self.api_url}/sendMessage",
                        data=data,
                        timeout=self.timeout
                    )
                    response.raise_for_status()
                    
                    result = response.json()
                    if result.get('ok'):
                        self.messages_sent += 1
                        self.logger.debug(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message[:50]}...")
                        return True
                    else:
                        self.logger.warning(f"‚ö†Ô∏è Telegram API –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π: {result}")
                        
                except requests.exceptions.RequestException as e:
                    self.logger.warning(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                    if attempt < self.max_retries - 1:
                        import time
                        time.sleep(self.retry_delay)
            
            self.messages_failed += 1
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False
    
    async def _send_with_retry(self, method: str, data: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å retry –ª–æ–≥–∏–∫–æ–π"""
        for attempt in range(self.max_retries):
            try:
                response = await self._make_api_request(method, data)
                
                if response and response.get('ok'):
                    return True
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: Telegram API –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π: {response}")
                    
            except Exception as e:
                self.logger.warning(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if attempt < self.max_retries - 1:
                await asyncio.sleep(self.retry_delay)
        
        return False
    
    async def _make_api_request(self, method: str, data: Optional[Dict] = None) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Telegram API"""
        url = f"{self.api_url}/{method}"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å async loop
        response = await asyncio.to_thread(
            requests.post if data else requests.get,
            url,
            data=data,
            timeout=self.timeout
        )
        
        response.raise_for_status()
        return response.json()
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞"""
        return {
            'name': self.name,
            'is_connected': self.is_connected,
            'messages_sent': self.messages_sent,
            'messages_failed': self.messages_failed,
            'success_rate': (
                self.messages_sent / (self.messages_sent + self.messages_failed) 
                if (self.messages_sent + self.messages_failed) > 0 else 0
            ),
            'last_message_time': self.last_message_time.isoformat() if self.last_message_time else None,
            'chat_id': self.chat_id,
            'api_url': self.api_url.replace(self.bot_token, '*****')  # –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        }
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    async def send_startup_message(self, symbol: str, buy_level: float, sell_level: float, websocket_url: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        message = (
            f"ü§ñ <b>–ö—Ä–∏–ø—Ç–æ-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
            f"üìä –°–∏–º–≤–æ–ª: <code>{symbol}</code>\n"
            f"üìà –£—Ä–æ–≤–µ–Ω—å –ø–æ–∫—É–ø–∫–∏: <code>${buy_level:,.2f}</code>\n"
            f"üìâ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–¥–∞–∂–∏: <code>${sell_level:,.2f}</code>\n"
            f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: <code>{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</code>\n"
            f"üåê WebSocket: <code>{websocket_url}</code>"
        )
        return await self.send_message(message)
    
    async def send_signal_message(self, symbol: str, action: str, price: float) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
        emoji = "üìà" if action == "BUY" else "üìâ"
        message = (
            f"{emoji} <b>–°–ò–ì–ù–ê–õ –ø–æ {symbol}</b>\n\n"
            f"üìä –î–µ–π—Å—Ç–≤–∏–µ: <b>{action}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <code>${price:,.2f}</code>\n"
            f"‚è∞ –í—Ä–µ–º—è: <code>{datetime.now().strftime('%H:%M:%S')}</code>"
        )
        return await self.send_message(message)
    
    async def send_shutdown_message(self, uptime: str, reconnect_count: int, total_signals: int, last_signal: Optional[str]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
        message = (
            f"üõë <b>–ö—Ä–∏–ø—Ç–æ-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <code>{uptime}</code>\n"
            f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: <code>{reconnect_count}</code>\n"
            f"üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: <code>{total_signals}</code>\n"
            f"üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª: <code>{last_signal or '–ù–µ—Ç'}</code>"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        return self.send_message_sync(message)
