#!/usr/bin/env python3
"""
–ö—Ä–∏–ø—Ç–æ–±–æ—Ç - –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""
import asyncio
import sys
import os
import signal
import logging
import platform
from datetime import datetime
from app.bot import CryptoBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class DetailedMain:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self):
        self.bot = None
        self.start_time = datetime.now()
        self.shutdown_initiated = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ main
        self._setup_signal_handlers()
        
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ main.py"""
        
        def detailed_signal_handler(signum, frame):
            if self.shutdown_initiated:
                return
                
            self.shutdown_initiated = True
            signal_names = {
                2: 'SIGINT (Ctrl+C)',
                15: 'SIGTERM (Graceful shutdown)',
                9: 'SIGKILL (Force kill)',
                1: 'SIGHUP (Hangup)',
            }
            
            signal_name = signal_names.get(signum, f'Unknown signal ({signum})')
            uptime = datetime.now() - self.start_time
            
            logger.error("=" * 70)
            logger.error(f"üö® MAIN.PY: –ü–û–õ–£–ß–ï–ù –°–ò–ì–ù–ê–õ –ó–ê–í–ï–†–®–ï–ù–ò–Ø!")
            logger.error(f"üì° –°–∏–≥–Ω–∞–ª: {signal_name}")
            logger.error(f"üìç –ú–µ—Å—Ç–æ: {frame.f_code.co_filename}:{frame.f_lineno}")
            logger.error(f"üì¶ PID: {os.getpid()}")
            logger.error(f"‚è±Ô∏è Uptime: {uptime}")
            logger.error(f"üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.platform()}")
            logger.error(f"üêç Python: {sys.version.split()[0]}")
            
            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            try:
                import psutil
                process = psutil.Process(os.getpid())
                memory_mb = process.memory_info().rss / 1024 / 1024
                cpu_percent = process.cpu_percent()
                logger.error(f"üíæ –ü–∞–º—è—Ç—å: {memory_mb:.1f} MB")
                logger.error(f"üñ•Ô∏è CPU: {cpu_percent:.1f}%")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã
                system_memory = psutil.virtual_memory()
                logger.error(f"üåê –°–∏—Å—Ç–µ–º–∞ - –ü–∞–º—è—Ç—å: {system_memory.percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ")
                logger.error(f"üåê –°–∏—Å—Ç–µ–º–∞ - –î–æ—Å—Ç—É–ø–Ω–æ: {system_memory.available / 1024 / 1024:.1f} MB")
                
            except ImportError:
                logger.error("üìä psutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
            if self.bot:
                try:
                    bot_stats = self.bot.get_bot_stats()
                    logger.error(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: {bot_stats.get('bot', {}).get('running', 'unknown')}")
                    logger.error(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏–π: {bot_stats.get('bot', {}).get('loop_iterations', 'unknown')}")
                    logger.error(f"üéØ –°–∏–≥–Ω–∞–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {bot_stats.get('strategy', {}).get('total_signals', 'unknown')}")
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞: {e}")
            else:
                logger.error("ü§ñ –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            try:
                import psutil
                connections = process.connections()
                logger.error(f"üåê –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(connections)}")
                for conn in connections[:5]:  # –ü–µ—Ä–≤—ã–µ 5
                    logger.error(f"   üì° {conn.laddr} -> {conn.raddr if conn.raddr else 'N/A'} ({conn.status})")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö: {e}")
            
            logger.error("üèÅ –ò–Ω–∏—Ü–∏–∞—Ü–∏—è graceful shutdown –∏–∑ main.py...")
            logger.error("=" * 70)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ gracefully
            if self.bot:
                self.bot.running = False
            
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        signal.signal(signal.SIGINT, detailed_signal_handler)
        signal.signal(signal.SIGTERM, detailed_signal_handler)
        signal.signal(signal.SIGHUP, detailed_signal_handler)
        
        logger.info("üì° –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ main.py")

    def run(self):
        """–ó–∞–ø—É—Å–∫ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        logger.info("=" * 70)
        logger.info("üöÄ MAIN.PY: –ó–ê–ü–£–°–ö –ö–†–ò–ü–¢–û–ë–û–¢–ê")
        logger.info("=" * 70)
        logger.info(f"üì¶ PID: {os.getpid()}")
        logger.info(f"üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        logger.info(f"üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.platform()}")
        logger.info(f"üêç Python: {sys.version}")
        logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {self.start_time}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        try:
            import psutil
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            logger.info(f"üíæ –î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–º—è—Ç–∏: {memory.available / 1024 / 1024:.1f} MB")
            logger.info(f"üíø –î–æ—Å—Ç—É–ø–Ω–æ –¥–∏—Å–∫–∞: {disk.free / 1024 / 1024 / 1024:.1f} GB")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—É—Ä—Å–∞—Ö: {e}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ CryptoBot...")
            self.bot = CryptoBot()
            
            logger.info("üèÅ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞...")
            asyncio.run(self.bot.run())
            
        except KeyboardInterrupt:
            logger.warning("‚å®Ô∏è MAIN.PY: –ü–æ–ª—É—á–µ–Ω KeyboardInterrupt")
            
        except Exception as e:
            logger.error("=" * 70)
            logger.error(f"üí• MAIN.PY: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê")
            logger.error(f"üìä –¢–∏–ø: {type(e).__name__}")
            logger.error(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            
            # –ü–æ–ª–Ω—ã–π traceback
            import traceback
            logger.error("üìã Traceback:")
            for line in traceback.format_exc().splitlines():
                logger.error(f"    {line}")
            logger.error("=" * 70)
            
            sys.exit(1)
            
        finally:
            final_uptime = datetime.now() - self.start_time
            logger.info("=" * 70)
            logger.info("üëã MAIN.PY: –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´")
            logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {final_uptime}")
            logger.info("=" * 70)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = DetailedMain()
    app.run()

if __name__ == "__main__":
    main()
