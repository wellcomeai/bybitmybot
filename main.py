#!/usr/bin/env python3
"""
–ö—Ä–∏–ø—Ç–æ–±–æ—Ç - –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
"""
import asyncio
import sys
import os
import signal
import logging
import platform
from datetime import datetime
from app.bot import CryptoBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class CryptoBotLauncher:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = None
        self.start_time = datetime.now()
        self.shutdown_initiated = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._setup_signal_handlers()
        
    def _setup_signal_handlers(self):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        
        def graceful_shutdown_handler(signum, frame):
            if self.shutdown_initiated:
                logger.warning("‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                return
                
            self.shutdown_initiated = True
            signal_names = {2: 'SIGINT', 15: 'SIGTERM', 1: 'SIGHUP'}
            signal_name = signal_names.get(signum, f'Signal {signum}')
            
            logger.warning(f"üö® –ü–æ–ª—É—á–µ–Ω {signal_name} - –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è graceful shutdown...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if self.bot:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
                self.bot.running = False
            else:
                logger.warning("‚ö†Ô∏è –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        signal.signal(signal.SIGINT, graceful_shutdown_handler)
        signal.signal(signal.SIGTERM, graceful_shutdown_handler)
        signal.signal(signal.SIGHUP, graceful_shutdown_handler)
        
        logger.info("üì° –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("=" * 60)
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ö–†–ò–ü–¢–û–ë–û–¢–ê")
        logger.info("=" * 60)
        logger.info(f"üì¶ PID: {os.getpid()}")
        logger.info(f"üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.platform()}")
        logger.info(f"üêç Python: {sys.version.split()[0]}")
        logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {self.start_time}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        try:
            import psutil
            memory = psutil.virtual_memory()
            logger.info(f"üíæ –î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–º—è—Ç–∏: {memory.available / 1024 / 1024:.1f} MB")
        except ImportError:
            logger.debug("psutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤")
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—É—Ä—Å–∞—Ö: {e}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ CryptoBot...")
            self.bot = CryptoBot()
            
            logger.info("üèÅ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞...")
            asyncio.run(self.bot.run())
            
        except KeyboardInterrupt:
            logger.warning("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω KeyboardInterrupt")
            
        except Exception as e:
            logger.error("=" * 60)
            logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê")
            logger.error(f"üìä –¢–∏–ø: {type(e).__name__}")
            logger.error(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            
            # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π traceback - —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Ç—Ä–æ–∫–∏
            import traceback
            tb_lines = traceback.format_exc().splitlines()
            logger.error("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ traceback:")
            for line in tb_lines[-3:]:
                logger.error(f"    {line}")
            logger.error("=" * 60)
            
            return 1
            
        finally:
            final_uptime = datetime.now() - self.start_time
            logger.info("=" * 60)
            logger.info("üëã –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´")
            logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {final_uptime}")
            logger.info("=" * 60)
            
        return 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    launcher = CryptoBotLauncher()
    exit_code = launcher.run()
    sys.exit(exit_code)

if __name__ == "__main__":
    main()
