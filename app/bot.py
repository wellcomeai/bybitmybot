import asyncio
import logging
import signal
import sys
import os
import platform
import threading
from datetime import datetime
from typing import Optional

from config import (
    TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, BYBIT_PUBLIC_WS, SYMBOL, 
    LOG_LEVEL, RECONNECT_DELAY, validate_config
)
from strategy import strategy
from connectors import BybitWebSocketConnector, TelegramConnector
from .health import start_health_server

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class CryptoBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–∞ —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self):
        self.running = True
        self.start_time = datetime.now()
        self.startup_message_sent = False
        self.loop_iterations = 0
        self.last_heartbeat = datetime.now()
        
        logger.info("üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CryptoBot...")
        logger.info(f"üè∑Ô∏è –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 1.0.0 (–º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)")
        logger.info(f"üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.platform()}")
        logger.info(f"üêç Python: {sys.version}")
        logger.info(f"üì¶ PID: {os.getpid()}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
        self._init_connectors()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callbacks
        self._setup_callbacks()
        
        logger.info("ü§ñ CryptoBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")
        
    def _init_connectors(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤...")
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Bybit WebSocket
            bybit_config = {
                'websocket_url': BYBIT_PUBLIC_WS,
                'symbol': SYMBOL,
                'reconnect_delay': RECONNECT_DELAY,
                'ping_interval': 20,
                'ping_timeout': 10,
                'recv_timeout': 30
            }
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Telegram
            telegram_config = {
                'bot_token': TELEGRAM_TOKEN,
                'chat_id': TELEGRAM_CHAT_ID,
                'timeout': 10,
                'max_retries': 3,
                'retry_delay': 2
            }
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
            logger.debug("üîó –°–æ–∑–¥–∞–Ω–∏–µ Bybit WebSocket –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞...")
            self.bybit_connector = BybitWebSocketConnector(bybit_config)
            
            logger.debug("üì± –°–æ–∑–¥–∞–Ω–∏–µ Telegram –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞...")
            self.telegram_connector = TelegramConnector(telegram_config)
            
            logger.info("‚úÖ –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤: {e}")
            logger.error(f"üìä –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}: {str(e)}")
            raise
    
    def _setup_callbacks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ callbacks –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤"""
        logger.debug("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ event callbacks...")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.bybit_connector.add_callback('connected', self._on_bybit_connected)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
        self.bybit_connector.add_callback('price_update', self._on_price_update)
        
        logger.debug("‚úÖ Event callbacks –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def _on_bybit_connected(self, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit"""
        logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Bybit: {data['symbol']} @ {data['websocket_url']}")
        logger.debug(f"üîç –î–µ—Ç–∞–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {data}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
        if not self.startup_message_sent:
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            await self._send_startup_message()
            self.startup_message_sent = True
    
    async def _on_price_update(self, price_event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        symbol = price_event['symbol']
        price = price_event['price']
        
        logger.debug(f"üìä {symbol}: ${price:,.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        try:
            signal_result = strategy.check_signal(price)
            if signal_result:
                logger.info(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ —Å–∏–≥–Ω–∞–ª: {signal_result}")
                await self._send_signal_message(symbol, signal_result, price)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            logger.error(f"üìä –¶–µ–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏: ${price:,.2f}")
    
    async def _send_startup_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ"""
        try:
            logger.debug("üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            stats = strategy.get_stats()
            success = await self.telegram_connector.send_startup_message(
                symbol=SYMBOL,
                buy_level=stats.get('buy_level', 0),
                sell_level=stats.get('sell_level', 0),
                websocket_url=BYBIT_PUBLIC_WS
            )
            
            if success:
                logger.info("üì± –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
    
    async def _send_signal_message(self, symbol: str, action: str, price: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞: {action} {symbol} @ ${price:,.2f}")
            success = await self.telegram_connector.send_signal_message(
                symbol=symbol,
                action=action,
                price=price
            )
            
            if success:
                logger.info(f"üöÄ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {action} {symbol} @ ${price:,.2f}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª: {action} {symbol}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            logger.error(f"üìä –î–µ—Ç–∞–ª–∏: {action} {symbol} @ ${price:,.2f}")
    
    async def _connect_all(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤"""
        logger.info("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤...")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º Telegram
            logger.info("üì± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            telegram_connected = await self.telegram_connector.connect()
            if not telegram_connected:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
                return False
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º Bybit WebSocket
            logger.info("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit WebSocket...")
            bybit_connected = await self.bybit_connector.connect()
            if not bybit_connected:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit")
                return False
            
            logger.info("‚úÖ –í—Å–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤: {e}")
            return False
    
    async def _disconnect_all(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤"""
        logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤...")
        
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
            if hasattr(self, 'bybit_connector'):
                logger.debug("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ Bybit...")
                await self.bybit_connector.disconnect()
            
            if hasattr(self, 'telegram_connector'):
                logger.debug("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ Telegram...")
                await self.telegram_connector.disconnect()
            
            logger.info("‚úÖ –í—Å–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤: {e}")
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        def signal_handler(signum, frame):
            signal_names = {
                2: 'SIGINT (Ctrl+C)',
                15: 'SIGTERM (Graceful shutdown)',
                9: 'SIGKILL (Force kill)',
                1: 'SIGHUP (Hangup)',
                3: 'SIGQUIT (Quit)',
                6: 'SIGABRT (Abort)',
            }
            
            signal_name = signal_names.get(signum, f'Unknown signal ({signum})')
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            logger.warning("=" * 60)
            logger.warning(f"üö® –ü–û–õ–£–ß–ï–ù –°–ò–ì–ù–ê–õ –ó–ê–í–ï–†–®–ï–ù–ò–Ø: {signal_name}")
            logger.warning(f"üìç –ú–µ—Å—Ç–æ –ø–æ–ª—É—á–µ–Ω–∏—è: {frame.f_code.co_filename}:{frame.f_lineno}")
            logger.warning(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {datetime.now() - self.start_time}")
            logger.warning(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏–π –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {self.loop_iterations}")
            logger.warning(f"üíì –ü–æ—Å–ª–µ–¥–Ω–∏–π heartbeat: {datetime.now() - self.last_heartbeat} –Ω–∞–∑–∞–¥")
            
            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å psutil, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                try:
                    import psutil
                    process = psutil.Process(os.getpid())
                    memory_mb = process.memory_info().rss / 1024 / 1024
                    cpu_percent = process.cpu_percent()
                    logger.warning(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_mb:.1f} MB")
                    logger.warning(f"üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {cpu_percent:.1f}%")
                except ImportError:
                    logger.debug("üìä psutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤
            logger.warning("üìä –°–û–°–¢–û–Ø–ù–ò–ï –ö–û–ù–ù–ï–ö–¢–û–†–û–í –ù–ê –ú–û–ú–ï–ù–¢ –ó–ê–í–ï–†–®–ï–ù–ò–Ø:")
            
            if hasattr(self, 'bybit_connector'):
                try:
                    bybit_stats = self.bybit_connector.get_stats()
                    logger.warning(f"  üîó Bybit: connected={bybit_stats.get('is_connected', False)}, "
                                 f"messages={bybit_stats.get('total_messages', 0)}, "
                                 f"reconnects={bybit_stats.get('reconnect_count', 0)}, "
                                 f"last_price={bybit_stats.get('last_price', 'N/A')}")
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Bybit: {e}")
            
            if hasattr(self, 'telegram_connector'):
                try:
                    telegram_stats = self.telegram_connector.get_stats()
                    logger.warning(f"  üì± Telegram: connected={telegram_stats.get('is_connected', False)}, "
                                 f"sent={telegram_stats.get('messages_sent', 0)}, "
                                 f"failed={telegram_stats.get('messages_failed', 0)}")
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Telegram: {e}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            try:
                strategy_stats = strategy.get_stats()
                logger.warning(f"  üéØ Strategy: signals={strategy_stats.get('total_signals', 0)}, "
                             f"last_signal={strategy_stats.get('last_signal', 'None')}, "
                             f"last_price={strategy_stats.get('last_price', 'N/A')}")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            
            logger.warning("üèÅ –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è graceful shutdown...")
            logger.warning("=" * 60)
            self.running = False
            
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGHUP, signal_handler)
        
        logger.info("üì° –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (SIGINT, SIGTERM, SIGHUP)")
    
    async def _send_shutdown_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
        try:
            logger.info("üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã...")
            uptime = str(datetime.now() - self.start_time)
            stats = strategy.get_stats()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤
            reconnect_count = getattr(self.bybit_connector, 'reconnect_count', 0)
            
            success = await self.telegram_connector.send_shutdown_message(
                uptime=uptime,
                reconnect_count=reconnect_count,
                total_signals=stats.get('total_signals', 0),
                last_signal=stats.get('last_signal')
            )
            
            if success:
                logger.info("üì± –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
    
    def get_bot_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ –¥–ª—è health check"""
        try:
            strategy_stats = strategy.get_stats()
            
            bybit_stats = {}
            if hasattr(self, 'bybit_connector'):
                bybit_stats = self.bybit_connector.get_stats()
            
            telegram_stats = {}
            if hasattr(self, 'telegram_connector'):
                telegram_stats = self.telegram_connector.get_stats()
            
            return {
                'bot': {
                    'running': self.running,
                    'uptime': str(datetime.now() - self.start_time),
                    'startup_message_sent': self.startup_message_sent,
                    'loop_iterations': self.loop_iterations,
                    'last_heartbeat': self.last_heartbeat.isoformat()
                },
                'strategy': strategy_stats,
                'connectors': {
                    'bybit': bybit_stats,
                    'telegram': telegram_stats
                }
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'error': str(e)}
    
    async def _health_check_loop(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤"""
        logger.info("üè• –ó–∞–ø—É—Å–∫ health check —Ü–∏–∫–ª–∞...")
        check_interval = 30
        
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                logger.debug("ü©∫ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è health check...")
                
                bybit_healthy = await self.bybit_connector.is_healthy()
                if not bybit_healthy:
                    logger.warning("‚ö†Ô∏è Bybit –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –Ω–µ –∑–¥–æ—Ä–æ–≤")
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    bybit_stats = self.bybit_connector.get_stats()
                    logger.warning(f"üîç Bybit –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {bybit_stats}")
                
                telegram_healthy = await self.telegram_connector.is_healthy()
                if not telegram_healthy:
                    logger.warning("‚ö†Ô∏è Telegram –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –Ω–µ –∑–¥–æ—Ä–æ–≤")
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    telegram_stats = self.telegram_connector.get_stats()
                    logger.warning(f"üîç Telegram –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {telegram_stats}")
                
                # –ï—Å–ª–∏ –æ–±–∞ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤—ã, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
                if bybit_healthy and telegram_healthy:
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ
                    if self.loop_iterations % (10 * 60 / check_interval) == 0:
                        logger.debug("‚úÖ –í—Å–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –∑–¥–æ—Ä–æ–≤—ã")
                
                # –°–ø–∏–º –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                await asyncio.sleep(check_interval)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ health check: {e}")
                await asyncio.sleep(5)
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        logger.info("=" * 60)
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ö–†–ò–ü–¢–û–ë–û–¢–ê (–ú–û–î–£–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)")
        logger.info("=" * 60)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        logger.info(f"üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.platform()}")
        logger.info(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version.split()[0]}")
        logger.info(f"üì¶ Process ID: {os.getpid()}")
        logger.info(f"üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        logger.info(f"üéØ –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª: {SYMBOL}")
        logger.info(f"üîó WebSocket URL: {BYBIT_PUBLIC_WS}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            validate_config()
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        except ValueError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        logger.info("üè• –ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞...")
        health_thread = threading.Thread(target=start_health_server, daemon=True)
        health_thread.start()
        logger.info("üè• Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        logger.info("üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        self._setup_signal_handlers()
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
            logger.info("üîå –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤...")
            if not await self._connect_all():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º health check –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            logger.info("üè• –ó–∞–ø—É—Å–∫ health check –∑–∞–¥–∞—á–∏...")
            health_task = asyncio.create_task(self._health_check_loop())
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã
            logger.info("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            logger.info("‚è≥ –í—Ö–æ–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è...")
            logger.info("=" * 60)
            
            try:
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
                while self.running:
                    self.loop_iterations += 1
                    
                    # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –ª–æ–≥–∏—Ä—É–µ–º heartbeat
                    if self.loop_iterations % 300 == 0:  # 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
                        uptime = datetime.now() - self.start_time
                        strategy_stats = strategy.get_stats()
                        bybit_reconnects = getattr(self.bybit_connector, 'reconnect_count', 0)
                        
                        logger.info(f"üíì Heartbeat: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç {uptime}, "
                                  f"—Å–∏–≥–Ω–∞–ª–æ–≤: {strategy_stats.get('total_signals', 0)}, "
                                  f"–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {bybit_reconnects}")
                        
                        self.last_heartbeat = datetime.now()
                    
                    await asyncio.sleep(1)
                    
            except asyncio.CancelledError:
                logger.warning("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
            finally:
                logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
                # –û—Ç–º–µ–Ω—è–µ–º health check –∑–∞–¥–∞—á—É
                health_task.cancel()
                try:
                    await health_task
                except asyncio.CancelledError:
                    logger.debug("‚úÖ Health check –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            
        except KeyboardInterrupt:
            logger.warning("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω Ctrl+C. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            logger.error(f"üìä –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            logger.error(f"üìã Traceback: {traceback.format_exc()}")
        finally:
            logger.info("=" * 60)
            logger.info("üèÅ –ù–ê–ß–ê–õ–û –ü–†–û–¶–ï–î–£–†–´ –ó–ê–í–ï–†–®–ï–ù–ò–Ø –†–ê–ë–û–¢–´")
            logger.info("=" * 60)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            try:
                logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏...")
                await self._send_shutdown_message()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
            try:
                await self._disconnect_all()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤: {e}")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            final_uptime = datetime.now() - self.start_time
            final_stats = strategy.get_stats() if hasattr(strategy, 'get_stats') else {}
            
            logger.info("=" * 60)
            logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {final_uptime}")
            logger.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏–π –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {self.loop_iterations}")
            logger.info(f"üéØ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {final_stats.get('total_signals', 'N/A')}")
            logger.info(f"üìà –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {final_stats.get('last_signal', '–ù–µ—Ç')}")
            logger.info("=" * 60)
            logger.info("üëã –ö—Ä–∏–ø—Ç–æ–±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
            logger.info("=" * 60)
