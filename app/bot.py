import asyncio
import logging
import signal
import sys
import threading
from datetime import datetime
from typing import Optional

from config import (
    TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, BYBIT_PUBLIC_WS, SYMBOL, 
    LOG_LEVEL, RECONNECT_DELAY, validate_config, BUY_LEVEL, SELL_LEVEL
)
from strategy import strategy
from connectors import BybitWebSocketConnector, TelegramConnector
from .health import start_health_server

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class CryptoBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–∞ —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self):
        self.running = True
        self.start_time = datetime.now()
        self.startup_message_sent = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
        self._init_connectors()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callbacks
        self._setup_callbacks()
        
    def _init_connectors(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤"""
        try:
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Bybit WebSocket
            bybit_config = {
                'websocket_url': BYBIT_PUBLIC_WS,
                'symbol': SYMBOL,
                'reconnect_delay': RECONNECT_DELAY,
                'ping_interval': 20,
                'ping_timeout': 10,
                'recv_timeout': 30
            }
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Telegram
            telegram_config = {
                'bot_token': TELEGRAM_TOKEN,
                'chat_id': TELEGRAM_CHAT_ID,
                'timeout': 10,
                'max_retries': 3,
                'retry_delay': 2
            }
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
            self.bybit_connector = BybitWebSocketConnector(bybit_config)
            self.telegram_connector = TelegramConnector(telegram_config)
            
            logger.info("‚úÖ –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤: {e}")
            raise
    
    def _setup_callbacks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ callbacks –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤"""
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.bybit_connector.add_callback('connected', self._on_bybit_connected)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
        self.bybit_connector.add_callback('price_update', self._on_price_update)
        
        logger.debug("‚úÖ Callbacks –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def _on_bybit_connected(self, data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit"""
        logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Bybit: {data['symbol']} @ {data['websocket_url']}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
        if not self.startup_message_sent:
            await self._send_startup_message()
            self.startup_message_sent = True
    
    async def _on_price_update(self, price_event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        symbol = price_event['symbol']
        price = price_event['price']
        
        logger.debug(f"üìä {symbol}: ${price:,.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        signal = strategy.check_signal(price)
        if signal:
            await self._send_signal_message(symbol, signal, price)
    
    async def _send_startup_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ"""
        try:
            stats = strategy.get_stats()
            success = await self.telegram_connector.send_startup_message(
                symbol=SYMBOL,
                buy_level=stats['buy_level'],
                sell_level=stats['sell_level'],
                websocket_url=BYBIT_PUBLIC_WS
            )
            
            if success:
                logger.info("üì± –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
    
    async def _send_signal_message(self, symbol: str, action: str, price: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            success = await self.telegram_connector.send_signal_message(
                symbol=symbol,
                action=action,
                price=price
            )
            
            if success:
                logger.info(f"üöÄ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {action} {symbol} @ ${price:,.2f}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª: {action} {symbol}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
    
    async def _connect_all(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤"""
        logger.info("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤...")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º Telegram
            telegram_connected = await self.telegram_connector.connect()
            if not telegram_connected:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
                return False
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º Bybit WebSocket
            bybit_connected = await self.bybit_connector.connect()
            if not bybit_connected:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit")
                return False
            
            logger.info("‚úÖ –í—Å–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤: {e}")
            return False
    
    async def _disconnect_all(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤"""
        logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤...")
        
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
            if hasattr(self, 'bybit_connector'):
                await self.bybit_connector.disconnect()
            
            if hasattr(self, 'telegram_connector'):
                await self.telegram_connector.disconnect()
            
            logger.info("‚úÖ –í—Å–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤: {e}")
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        def signal_handler(signum, frame):
            logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            self.running = False
            
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    async def _send_shutdown_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
        try:
            uptime = str(datetime.now() - self.start_time)
            stats = strategy.get_stats()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤
            reconnect_count = getattr(self.bybit_connector, 'reconnect_count', 0)
            
            success = await self.telegram_connector.send_shutdown_message(
                uptime=uptime,
                reconnect_count=reconnect_count,
                total_signals=stats['total_signals'],
                last_signal=stats['last_signal']
            )
            
            if success:
                logger.info("üì± –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
    
    def get_bot_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ –¥–ª—è health check"""
        try:
            strategy_stats = strategy.get_stats()
            
            bybit_stats = {}
            if hasattr(self, 'bybit_connector'):
                bybit_stats = self.bybit_connector.get_stats()
            
            telegram_stats = {}
            if hasattr(self, 'telegram_connector'):
                telegram_stats = self.telegram_connector.get_stats()
            
            return {
                'bot': {
                    'running': self.running,
                    'uptime': str(datetime.now() - self.start_time),
                    'startup_message_sent': self.startup_message_sent
                },
                'strategy': strategy_stats,
                'connectors': {
                    'bybit': bybit_stats,
                    'telegram': telegram_stats
                }
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'error': str(e)}
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–∞ (–º–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            validate_config()
        except ValueError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check
        health_thread = threading.Thread(target=start_health_server, daemon=True)
        health_thread.start()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._setup_signal_handlers()
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
            if not await self._connect_all():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã")
                return
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã
            logger.info("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            while self.running:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤
                    if not await self.bybit_connector.is_healthy():
                        logger.warning("‚ö†Ô∏è Bybit –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –Ω–µ –∑–¥–æ—Ä–æ–≤")
                    
                    if not await self.telegram_connector.is_healthy():
                        logger.warning("‚ö†Ô∏è Telegram –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –Ω–µ –∑–¥–æ—Ä–æ–≤")
                    
                    # –°–ø–∏–º –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    await asyncio.sleep(30)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                    await asyncio.sleep(5)
            
        except KeyboardInterrupt:
            logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω Ctrl+C. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
        finally:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await self._send_shutdown_message()
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
            await self._disconnect_all()
            
            logger.info("üëã –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
