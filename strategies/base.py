from abc import ABC, abstractmethod
from typing import Dict, Any, Optional
import logging
from datetime import datetime

class BaseStrategy(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    
    def __init__(self, name: str):
        self.name = name
        self.logger = logging.getLogger(f"Strategy.{name}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.last_signal = None
        self.last_price = None
        self.signal_count = 0
        self.created_at = datetime.now()
        
        self.logger.info(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{name}' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    @abstractmethod
    def check_signal(self, price: float) -> Optional[str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–∏–≥–Ω–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        
        Args:
            price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            str: 'BUY', 'SELL' –∏–ª–∏ None
        """
        pass
    
    @abstractmethod
    def get_strategy_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (—É—Ä–æ–≤–Ω–∏, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)"""
        pass
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        uptime = datetime.now() - self.created_at
        
        return {
            "name": self.name,
            "last_signal": self.last_signal,
            "last_price": self.last_price,
            "total_signals": self.signal_count,
            "uptime": str(uptime),
            **self.get_strategy_info()
        }
    
    def reset(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self.last_signal = None
        self.last_price = None
        self.signal_count = 0
        self.logger.info(f"üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{self.name}' —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def _emit_signal(self, signal: str, price: float) -> str:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —ç–º–∏—Å—Å–∏–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        self.last_signal = signal
        self.last_price = price
        self.signal_count += 1
        
        self.logger.info(f"üéØ –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal} @ ${price:,.2f} (#{self.signal_count})")
        return signal
