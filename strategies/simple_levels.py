from typing import Dict, Any, Optional
from .base import BaseStrategy

class SimpleLevelsStrategy(BaseStrategy):
    """
    –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    
    - BUY —Å–∏–≥–Ω–∞–ª, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –ø–æ–∫—É–ø–∫–∏
    - SELL —Å–∏–≥–Ω–∞–ª, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–¥–∞–∂–∏  
    - –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    """
    
    def __init__(self, buy_level: float = None, sell_level: float = None):
        super().__init__("SimpleLevels")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if buy_level is None or sell_level is None:
            from config import BUY_LEVEL, SELL_LEVEL
            self.buy_level = buy_level or BUY_LEVEL
            self.sell_level = sell_level or SELL_LEVEL
        else:
            self.buy_level = buy_level
            self.sell_level = sell_level
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if self.buy_level <= self.sell_level:
            raise ValueError("BUY_LEVEL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ SELL_LEVEL")
        
        self.logger.info(f"üìà –£—Ä–æ–≤–µ–Ω—å –ø–æ–∫—É–ø–∫–∏: ${self.buy_level:,.2f}")
        self.logger.info(f"üìâ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–¥–∞–∂–∏: ${self.sell_level:,.2f}")
    
    def check_signal(self, price: float) -> Optional[str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–∏–≥–Ω–∞–ª
        
        –õ–æ–≥–∏–∫–∞:
        - BUY, –µ—Å–ª–∏ —Ü–µ–Ω–∞ > buy_level
        - SELL, –µ—Å–ª–∏ —Ü–µ–Ω–∞ < sell_level  
        - None –µ—Å–ª–∏ —Ü–µ–Ω–∞ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ –∏–ª–∏ —Å–∏–≥–Ω–∞–ª –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è
        """
        current_signal = None
        
        if price > self.buy_level:
            current_signal = "BUY"
        elif price < self.sell_level:
            current_signal = "SELL"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å–∏–≥–Ω–∞–ª (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
        if current_signal and current_signal != self.last_signal:
            return self._emit_signal(current_signal, price)
        
        return None
    
    def get_strategy_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return {
            "buy_level": self.buy_level,
            "sell_level": self.sell_level,
            "spread": self.buy_level - self.sell_level,
            "spread_percent": ((self.buy_level - self.sell_level) / self.sell_level) * 100
        }
    
    def update_levels(self, buy_level: float, sell_level: float):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏"""
        if buy_level <= sell_level:
            raise ValueError("BUY_LEVEL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ SELL_LEVEL")
        
        old_buy, old_sell = self.buy_level, self.sell_level
        self.buy_level = buy_level
        self.sell_level = sell_level
        
        self.logger.info(f"üîÑ –£—Ä–æ–≤–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:")
        self.logger.info(f"  üìà –ü–æ–∫—É–ø–∫–∞: ${old_buy:,.2f} ‚Üí ${self.buy_level:,.2f}")
        self.logger.info(f"  üìâ –ü—Ä–æ–¥–∞–∂–∞: ${old_sell:,.2f} ‚Üí ${self.sell_level:,.2f}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.reset()
