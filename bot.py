import asyncio
import websockets
import json
import requests
import logging
import signal
import sys
import os
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading
from config import (
    TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, BYBIT_PUBLIC_WS, SYMBOL, 
    LOG_LEVEL, RECONNECT_DELAY, validate_config
)
from strategy import strategy

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class HealthCheckHandler(BaseHTTPRequestHandler):
    """–ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check –≤ Render"""
    
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            stats = strategy.get_stats()
            health_data = {
                "status": "healthy",
                "service": "crypto-bot",
                "symbol": SYMBOL,
                "total_signals": stats["total_signals"],
                "last_signal": stats["last_signal"],
                "last_price": stats["last_price"]
            }
            self.wfile.write(json.dumps(health_data).encode())
        else:
            self.send_response(404)
            self.end_headers()
            self.wfile.write(b'Not Found')
    
    def log_message(self, format, *args):
        # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞ —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –≤—ã–≤–æ–¥
        pass

def start_health_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    port = int(os.environ.get('PORT', 8080))
    server = HTTPServer(('0.0.0.0', port), HealthCheckHandler)
    logger.info(f"üè• Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.serve_forever()

class CryptoBot:
    def __init__(self):
        self.running = True
        self.reconnect_count = 0
        self.start_time = datetime.now()
        self.startup_message_sent = False
        
    def send_telegram_sync(self, message: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        
        for attempt in range(3):
            try:
                response = requests.post(
                    url, 
                    data={"chat_id": TELEGRAM_CHAT_ID, "text": message},
                    timeout=10
                )
                response.raise_for_status()
                logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {message[:50]}...")
                return True
                
            except requests.exceptions.RequestException as e:
                logger.warning(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                if attempt < 2:
                    import time
                    time.sleep(2)
        
        logger.error(f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {message}")
        return False
    
    async def send_telegram(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å retry –ª–æ–≥–∏–∫–æ–π"""
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        
        for attempt in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.to_thread –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ HTTP –∑–∞–ø—Ä–æ—Å–∞
                response = await asyncio.to_thread(
                    requests.post,
                    url, 
                    data={"chat_id": TELEGRAM_CHAT_ID, "text": message},
                    timeout=10
                )
                response.raise_for_status()
                logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {message[:50]}...")
                return True
                
            except requests.exceptions.RequestException as e:
                logger.warning(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                if attempt < 2:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏
                    await asyncio.sleep(2)
        
        logger.error(f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {message}")
        return False
    
    async def send_startup_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        stats = strategy.get_stats()
        message = (
            f"ü§ñ –ö—Ä–∏–ø—Ç–æ-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n\n"
            f"üìä –°–∏–º–≤–æ–ª: {SYMBOL}\n"
            f"üìà –£—Ä–æ–≤–µ–Ω—å –ø–æ–∫—É–ø–∫–∏: {stats['buy_level']}\n"
            f"üìâ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–¥–∞–∂–∏: {stats['sell_level']}\n"
            f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"üåê WebSocket: {BYBIT_PUBLIC_WS}"
        )
        await self.send_telegram(message)
    
    async def handle_websocket_data(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebSocket"""
        try:
            if "data" in data and isinstance(data["data"], dict):
                price_str = data["data"].get("lastPrice")
                if not price_str:
                    return
                    
                price = float(price_str)
                logger.debug(f"üìä {SYMBOL}: {price}")
                
                signal = strategy.check_signal(price)
                if signal:
                    message = (
                        f"üöÄ –°–ò–ì–ù–ê–õ –ø–æ {SYMBOL}\n\n"
                        f"üìä –î–µ–π—Å—Ç–≤–∏–µ: {signal}\n"
                        f"üí∞ –¶–µ–Ω–∞: ${price:,.2f}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                    )
                    logger.info(message.replace('\n', ' | '))
                    await self.send_telegram(message)
                    
        except (ValueError, KeyError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def websocket_handler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        while self.running:
            try:
                logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {BYBIT_PUBLIC_WS}...")
                
                async with websockets.connect(
                    BYBIT_PUBLIC_WS,
                    ping_interval=20,
                    ping_timeout=10
                ) as ws:
                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–∏–∫–µ—Ä—ã
                    sub_msg = {"op": "subscribe", "args": [f"tickers.{SYMBOL}"]}
                    await ws.send(json.dumps(sub_msg))
                    
                    logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä—ã {SYMBOL} —É—Å–ø–µ—à–Ω–∞")
                    self.reconnect_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
                    if not self.startup_message_sent:
                        await self.send_startup_message()
                        self.startup_message_sent = True
                    
                    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    while self.running:
                        try:
                            msg = await asyncio.wait_for(ws.recv(), timeout=30)
                            data = json.loads(msg)
                            await self.handle_websocket_data(data)
                            
                        except asyncio.TimeoutError:
                            logger.warning("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping...")
                            await ws.ping()
                            
            except websockets.exceptions.ConnectionClosed:
                if self.running:
                    self.reconnect_count += 1
                    logger.warning(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ #{self.reconnect_count} —á–µ—Ä–µ–∑ {RECONNECT_DELAY}—Å...")
                    await asyncio.sleep(RECONNECT_DELAY)
                    
            except Exception as e:
                if self.running:
                    self.reconnect_count += 1
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ #{self.reconnect_count} —á–µ—Ä–µ–∑ {RECONNECT_DELAY}—Å...")
                    await asyncio.sleep(RECONNECT_DELAY)
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            validate_config()
        except ValueError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        health_thread = threading.Thread(target=start_health_server, daemon=True)
        health_thread.start()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        def signal_handler(signum, frame):
            logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            self.running = False
            
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        try:
            await self.websocket_handler()
        except KeyboardInterrupt:
            logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω Ctrl+C. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        finally:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
            uptime = datetime.now() - self.start_time
            stats = strategy.get_stats()
            message = (
                f"üõë –ö—Ä–∏–ø—Ç–æ-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\n"
                f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {self.reconnect_count}\n"
                f"üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats['total_signals']}\n"
                f"üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {stats['last_signal'] or '–ù–µ—Ç'}"
            )
            self.send_telegram_sync(message)
            logger.info("üëã –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

def main():
    bot = CryptoBot()
    try:
        asyncio.run(bot.run())
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
